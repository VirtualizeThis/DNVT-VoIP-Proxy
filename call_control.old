#include <pjlib.h>
#include <pjmedia.h>
#include <pjsip.h>
#include <pjsip_simple.h>
#include <pjsua-lib/pjsua.h>
#include <pjmedia/sdp.h>
#include <pjmedia/sdp_neg.h>
#include <pjmedia/session.h>
#include <pjsua-lib/pjsua.h>
#include <pjmedia-codec.h>
#include <pjsua.h>
#include <pj/types.h>
#include <string.h>



#define PJMEDIA_CODEC_PCMU 0

// Start the INVITE phase of SIP/SDP negotiation in PJSIP, you can use the pjsua_call_make_call() function.
// This function initiates a call by sending an INVITE request to the specified destination URI.
//
void start_invite_phase(pjsua_acc_id acc_id, const char* dest_uri) {
    pj_status_t status;
    pj_str_t uri = pj_str((char*)dest_uri);
    status = pjsua_call_make_call(acc_id, &uri, 0, NULL, NULL, NULL);
    if (status != PJ_SUCCESS) {
        PJ_LOG(3, ("Error making call to %s", NULL));
    }
}

// Function that handles SDP - Needs a rename
// This code should create a local SDP answer based on the remote SDP offer and set up the media session for the call.

/* Create local SDP */;
        pjmedia_sdp_session *local_sdp = NULL;
        pj_pool_t *pool = pj_pool_create(pjmedia_endpt_get_pool(pjsua_get_pjmedia_endpt()), "sdp", 1000, 1000, NULL);
        status = pjmedia_sdp_session_create(pool, &local_sdp);
        if (status != PJ_SUCCESS) {
            PJ_LOG(3, ("Error creating local SDP: %s", NULL));
        }

/* Set local SDP */
        status = pjsua_call_set_local_sdp(call_id, local_sdp);
        if (status != PJ_SUCCESS) {
            PJ_LOG(3, ("Error setting local SDP: %s", NULL));
        }

        // Send INVITE with local SDP
        status = pjsua_call_answer(call_id, PJSIP_SC_OK, local_sdp, NULL);
        if (status != PJ_SUCCESS) {
            PJ_LOG(3, ("Error sending INVITE response: %s", NULL));
        }


/* Destroy remote SDP */
if (remote_sdp != NULL) {
    pjmedia_sdp_session_destroy(remote_sdp);
    return;}
/**/
/* Set codec for media session */
pjsua_media_config media_cfg = {
    .clock_rate = 8000,
    .snd_clock_rate = 16000,
    .channel_count = 1,
    .ec_tail_len = 0,
    .quality = 5
};
/*
memset(&media_cfg, 0, sizeof(media_cfg));
*/

pjmedia_codec_info codec_info = {
    .encoding_name = PJMEDIA_CODEC_PCMU
};
pjmedia_codec_mgr_get_default_param(codec_info);
pjmedia_codec_param param;
pjmedia_codec_mgr_init_param(param);
pjmedia_codec_mgr_set_default_param(codec_info, param);
pjmedia_codec_mgr_set_codec_param(media_cfg, param);

/* Create media session */
pjsua_media_create(pjmedia_endpt_var, media_cfg);

/*end media creation section*/

/* Cleanup */
pjmedia_sdp_session_destroy(local_sdp);
pjmedia_sdp_session_destroy(remote_sdp);



// How to accept responses from the SIP Server
// Trying and Ringing Phase of the SDP

static void on_call_media_state(pjsua_call_id call_id)
{
    pjsua_call_info ci;
    pjsua_call_get_info(call_id, &ci);

    if (ci.media_status == PJSUA_CALL_MEDIA_ACTIVE) {
        PJ_LOG(3, ("Media is now active", NULL));
    }
}

static void on_call_state(pjsua_call_id call_id, pjsip_event *e)
{
    pjsua_call_info ci;

    PJ_UNUSED_ARG(e);

    pjsua_call_get_info(call_id, &ci);
    PJ_LOG(3, ("Call %d state=%.*s", NULL));

    if (ci.state == PJSIP_INV_STATE_EARLY) {
        /* Handle "trying" and "ringing" responses */
        if (PJSIP_SC_TRYING == ci.last_status) {
            PJ_LOG(3, ("Got 100 Trying response, last_status=%s", NULL));
        } else if (PJSIP_SC_RINGING == ci.last_status) {
            PJ_LOG(3, ("Got 180 Ringing response", NULL));
            /* Tell the endpoint to start ringing */
            pjsua_call_set_hold(call_id, 0);
        } else if (PJSIP_SC_OK == ci.last_status) {
        PJ_LOG(3, ("Got 200 OK response", NULL));
    } else if (ci.state == PJSIP_INV_STATE_CONFIRMED) {
        /* Send ACK */
        pjsua_call_is_active(call_id);
        PJ_LOG(3, ("Call Transfered to SDP Function", NULL));
        handle_ok_response(call_id); /*/ Call a function to start SDP Media stuff*/
    } else if (ci.state == PJSIP_INV_STATE_DISCONNECTED) {
        PJ_LOG(3, ("Call %d disconnected", NULL));
    }
}
}